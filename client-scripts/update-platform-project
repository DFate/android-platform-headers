#!/usr/bin/env python
import sys
import os
import lxml.etree


APILEV_TO_RELEASE = {
    "android-4": "android-1.6_r1",
}


def load_props(fname):
    d = {}
    for l in open(fname):
        l = l.strip()
        if not l or l[0] == "#":
            continue
        k, v = [a.strip() for a in l.split("=", 1)]
        d[k] = v
    return d

def load_mk(fname):
    d = {}
    for l in open(fname):
        l = l.strip()
        if not l or l[0] == "#":
            continue
        try:
            k, v = [a.strip() for a in l.split(":=", 1)]
            d[k] = v
        except:
            pass
    return d


def symlink_lib(lib, core=False):
    if core:
        p = "corelibs"
    else:
        p = "libs"
    if not os.path.isdir(p):
        os.mkdir(p)
    p = p + "/" + lib + ".jar"
    if os.path.exists(p):
        os.remove(p)
    os.symlink("../../../android-platform-headers/android-1.6_r1/javalib/" + lib + ".jar", p)
    print "Symlinked " + p


def get_sdk_build_xml():
    sdk_build_xml = None
    tree = lxml.etree.parse("build.xml")
    for t in tree.xpath("import"):
        if "${sdk.dir}" in t.get("file"):
            return t.get("file")

def main():
    local_props = load_props("local.properties")
    project_props = load_props("project.properties")

    sdk_build_xml = get_sdk_build_xml()
    sdk_build_xml = sdk_build_xml.replace("${sdk.dir}", local_props["sdk.dir"])
#    print sdk_build_xml

    tree = lxml.etree.parse(sdk_build_xml)
#    print lxml.etree.tostring(tree.xpath("target[@name='-compile']")[0])

    root = lxml.etree.Element("project")
    root.append(lxml.etree.fromstring("""
    <path id="framework.complete">
        <pathelement path="corelibs/core.jar" />
        <pathelement path="corelibs/framework.jar" />
    </path>
    """))

    target = tree.xpath("target[@name='-compile']")[0]
    javac = target.xpath("//javac")[0]
    javac.set("bootclasspathref", "framework.complete")

    root.append(target)
    with open("custom_rules.xml", "w") as f:
        f.write(lxml.etree.tostring(root, pretty_print=True))
    print "Added custom_rules.xml"

    symlink_lib("core", True)
    symlink_lib("ext", True)
    symlink_lib("framework", True)

    mk = load_mk("Android.mk")
    for lib in mk["LOCAL_STATIC_JAVA_LIBRARIES"].split():
        symlink_lib(lib)


if __name__ == "__main__":
    main()
